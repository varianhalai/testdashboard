11/11 Can connect with coinomi mobile wallet. Argent throws an error(cannot read property .enable of undefined) but was working yesterday.
- Argent connects upon testing a second time.
-MetaMask connects from mobile

11/13 can connect and see FARM balance with argent wallet, but unable to stake.


11/24 - When I try to add fWETH instead of FWETHv1 in week eight pools the app crashes and i get an error from metamask asking me to migrate my assets using the website. 



 const [assetsToCheck,setAssetsToCheck] = useState([]);
    const tokens = [
        {
          id:0,
          name: "FARM",
          symbol: "FARM",
          url: "https://harvestfi.github.io/add-farm/",
          image: logo,
          address: '0xa0246c9032bC3A600820415aE600c6388619A14D',
          decimals: 18,
        },
        {
          id: 1,
          name: "fUSDC",
          symbol: "fUSDC",
          url: "https://harvestfi.github.io/add-fusdc/",
          image: usdcIcon,
          address: '0xc3f7ffb5d5869b3ade9448d094d81b0521e8326f',
          decimals: 18,
        },
        {
          id: 2,
          name: "fUSDT",
          symbol: "fUSDT",
          url: "https://harvestfi.github.io/add-fusdt/",
          image: usdtIcon,
          address: '0x053c80eA73Dc6941F518a68E2FC52Ac45BDE7c9C',
          decimals: 18,
        },
        {
          id: 3,
          name: "fDAI",
          symbol: "fDAI",
          url: "https://harvestfi.github.io/add-fdai/",
          image: daiIcon,
          address: '0x5d9d25c7C457dD82fc8668FFC6B9746b674d4EcB',
          decimals: 18,
        },
        {
          id: 4,
          name: "fwBTC",
          symbol: "fwBTC",
          url: "https://harvestfi.github.io/add-fwbtc/",
          image: wbtcIcon,
          address: '0x5d9d25c7C457dD82fc8668FFC6B9746b674d4EcB',
          decimals: 8,
        },
        {
          id: 5,
          name: "yCRV",
          symbol: "yCRV",
          image: yearn,
          address: "0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8",
          decimals: 18,
        },
        {
          id: 6,
          name: "3CRV",
          url: "https://harvestfi.github.io/add-3crv/",
          image: crv3,
          address: '0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490',
          decimals: 18,
        },
        {
          id: 7,
            name: "frenBTC",
            symbol: "frBTC",
            image: frenbtcIcon,
            address: '0xC391d1b08c1403313B0c28D47202DFDA015633C4',
            decimals: 18,
          },
          {
            id: 8,
            name: "fcrvRenWBTC",
            symbol: "fcrBTC",
            image: crvrenwbtcIcon,
            address: '0x9aA8F427A17d6B0d91B6262989EdC7D45d6aEdf8',
            decimals: 18,
          },
          {
            id: 9,
            name: "SUSHI:WBTC-TBTC",
            image: sushi,
            address: '0x2dbc7dd86c6cd87b525bd54ea73ebeebbc307f68',
            decimals: 18,
          },
          {
            id: 10,
            name: "UNI:ETH-WBTC",
            image: wbtc,
            address: '0x2dbc7dd86c6cd87b525bd54ea73ebeebbc307f68',
            decimals: 18,
          },
          {
            id: 11,
            name: "UNI:ETH-USDT",
            symbol: 'UNI-V2',
            image: usdt,
            address: '0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852',
            decimals: 18,
          },
          {
            id: 12,
            name: "UNI:ETH-USDCT",
            symbol: 'UNI-V2',
            image: usdc,
            address: '0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc',
            decimals: 18,
          },
          {
            id: 13,
            name: "UNI:ETH-DAI",
            symbol: 'UNI-V2',
            image: ethDai,
            address: '0xa478c2975ab1ea89e8196811f51a7b7ade33eb11',
            decimals: 18,
          }
        
      ];


    let minABI = [
      // balanceOf
      {
        "constant":true,
        "inputs":[{"name":"_owner","type":"address"}],
        "name":"balanceOf",
        "outputs":[{"name":"balance","type":"uint256"}],
        "type":"function"
      },
      // decimals
      {
        "constant":true,
        "inputs":[],
        "name":"decimals",
        "outputs":[{"name":"","type":"uint8"}],
        "type":"function"
      }
    ];

    const positions = {
      "0x25550Cccbd68533Fa04bFD3e3AC4D09f9e00Fc50": ["FARM Profit Sharing", 18],
      "0x99b0d6641A63Ce173E6EB063b3d3AED9A35Cf9bf": ["FARM:USDC Uniswap",18],
      "0x3DA9D911301f8144bdF5c3c67886e5373DCdff8e": ["fWETH",18],
      "0xeC56a21CF0D7FeB93C25587C12bFfe094aa0eCdA": ["fTUSD",18],
      "0x15d3A64B2d5ab9E152F16593Cdebc4bB165B5B4A": ["fDAI", 18],
      "0x4F7c28cCb0F1Dbd1388209C67eEc234273C878Bd": ["fUSDC",6],
      "0x6ac4a7AB91E6fD098E13B7d347c6d4d1494994a2": ["fUSDT",6],
      "0x917d6480Ec60cBddd6CbD0C8EA317Bcc709EA77B": ["fWBTC",8],
      "0x7b8Ff8884590f44e10Ea8105730fe637Ce0cb4F6": ["fRENBTC", 8],
      "0xA3Cf8D1CEe996253FAD1F8e3d68BDCba7B3A3Db5": ["fCRV-RENWBTC",18],
      "0x27F12d1a08454402175b9F0b53769783578Be7d9": ["fCRV-3POOL",18],
      "0x6D1b6Ea108AA03c6993d8010690264BA96D349A8": ["fCRV-YPOOL",18],
      "0x017eC1772A45d2cf68c429A820eF374f0662C57c": ["fCRV-TBTC",18],
      "0x76Aef359a33C02338902aCA543f37de4b01BA1FA": ["fSUSHI-ETH:DAI",18],
      "0xA56522BCA0A09f57B85C52c0Cc8Ba1B5eDbc64ef": ["fSUSHI-ETH:USDT",18],
      "0x6B4e1E0656Dd38F36c318b077134487B9b0cf7a6": ["fSUSHI-ETH:USDC",18],
      "0xE2D9FAe95f1e68afca7907dFb36143781f917194": ["fSUSHI-ETH:WBTC",18],
      "0xef4Da1CE3f487DA2Ed0BE23173F76274E0D47579": ["fCRV-USDN",18],
      "0x093C2ae5E6F3D2A897459aa24551289D462449AD": ["fCRV-BUSD",18],
      "0xC0f51a979e762202e9BeF0f62b07F600d0697DE1": ["fCRV-COMPOUND",18]
    }



    const readOnly = async (walletAddress,tokenAddress) => {

        
        // The minimum ABI to get ERC20 Token balance
        let minABI = [
          // balanceOf
          {
            "constant":true,
            "inputs":[{"name":"_owner","type":"address"}],
            "name":"balanceOf",
            "outputs":[{"name":"balance","type":"uint256"}],
            "type":"function"
          },
          // decimals
          {
            "constant":true,
            "inputs":[],
            "name":"decimals",
            "outputs":[{"name":"","type":"uint8"}],
            "type":"function"
          }
        ];
        // Get ERC20 Token contract instance
        let contract = new web3.eth.Contract(minABI, tokenAddress);
        // calculate a balance
       let balance = await contract.methods.balanceOf(walletAddress).call();
       let result = parseFloat(balance) / 1000000000000000000
        
        return result
      }


       console.log(signer)
       let balance;
       let p;
       let arr = [];
        for (p in positions) {
          let contract = new web3.eth.Contract(minABI, p);
          balance = await contract.methods.balanceOf(address).call();
          let result
          if(positions[p][1] === 18) {
            result = parseFloat(balance) / 1000000000000000000;
          }else if(positions[p][1] === 10) {
            result = parseFloat(balance) / 10000000000;
          }else if(positions[p][1] === 8) {
            result = parseFloat(balance) / 100000000;
          }else if(positions[p][1] === 6) {
            result = parseFloat(balance) / 1000000;
          }
          if(result !== 0) {
            console.log(`${positions[p][0]} : ${result}`)
            arr.push([positions[p][0],result])
          }
          
        }
        setReadOnlyPositions(arr)


        Reference this when refactoring read only.
        https://docs.ethers.io/v5/migration/web3/